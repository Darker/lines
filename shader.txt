precision mediump float;

varying vec2 vTextureCoord;
varying vec4 vColor;

uniform sampler2D uSampler;
uniform float customUniform;
uniform sampler2D bytes;


float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}
float rand2(vec2 co){
    return fract(cos(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}
void main(void)
{
   vec2 uvs = vTextureCoord.xy;
   vec4 fgold = texture2D(uSampler, uvs);
   
   //float randomAspect = 2.0*sin(customUniform/150.0);
   float randomAspect = 4.0;
   vec2 rnd = vec2(uvs.x+customUniform, uvs.y+customUniform);
   //ivec2 size = textureSize(uSampler, 0);
   uvs.x += (( rand(rnd)-0.5)/100.0)*randomAspect;
   uvs.y += ((rand2(rnd)-0.5)/100.0)*randomAspect;
   /*if(uvs.x<200000000.0) {
     uvs.x+= customUniform/1000.0;
   }
   else {
     uvs.x-= customUniform/1000.0;
   }   */
   vec4 fg = texture2D(uSampler, uvs);
   
   fg.r = (fg.r+fgold.r)/2.;
   fg.g = (fg.g+fgold.g)/2.;
   fg.b = (fg.b+fgold.b)/2.;
   //uvs.x += customUniform;
   //float subtract = randomAspect/2.0;
   //float sizeSq = fg.r*fg.r+fg.b*fg.b+fg.b*fg.b;
   
   //int pos = int(floor(rand(uvs)*10.0));
   //fg.r += float(bytes[pos]);
   //fg.g += bytes[pos];
   /*fg.r = fg.r+(rand(uvs)*randomAspect-subtract)*(sizeSq);

   fg.g = fg.g+(rand2(uvs)*randomAspect-subtract)*(sizeSq);

   fg.b = fg.b+(rand(uvs)*randomAspect-subtract)*(sizeSq);   */
   

   //fg.r = clamp(fg.r,0.0,0.9);

   gl_FragColor = fg;

}
